Steg fÃ¶r steg RegisterDB!!!

ðŸ”¹ Steg 1 â€“ Skapa en Resource Group

GÃ¥ till Azure Portal
.

Klicka pÃ¥ Create a resource â†’ Resource Group.

DÃ¶p den till t.ex. visitor-registration-rg.

VÃ¤lj en region nÃ¤ra dig (t.ex. North Europe).

Klicka Review + Create â†’ Create.

ðŸ”¹ Steg 2 â€“ Skapa databasen

I portalen, klicka Create a resource â†’ sÃ¶k Azure SQL Database.

Skapa en SQL Database:

Database name: VisitorDB

Server: Skapa ny â†’ t.ex. visitor-sql-server

Ange anvÃ¤ndarnamn och lÃ¶senord (spara dessa!).

Pricing tier: vÃ¤lj Basic (billigast fÃ¶r test).

Klicka Review + Create â†’ Create.

ðŸ‘‰ NÃ¤r databasen Ã¤r klar:

GÃ¥ till VisitorDB â†’ Query editor â†’ logga in med ditt anvÃ¤ndarnamn/lÃ¶senord.

KÃ¶r detta SQL fÃ¶r att skapa tabell:

CREATE TABLE Visitors (
    Id INT IDENTITY PRIMARY KEY,
    Name NVARCHAR(100),
    CheckInTime DATETIME DEFAULT GETDATE()
);

ðŸ”¹ Steg 3 â€“ Skapa backend (Azure Functions)

I portalen, Create a resource â†’ sÃ¶k Function App.

VÃ¤lj:

Name: visitor-function-app

Publish: Code

Runtime stack: Node.js eller .NET (bÃ¥da funkar, ta Node.js om du vill ha enklare JS-kod).

Region: samma som databasen.

Plan: Consumption (serverless).

Klicka Review + Create â†’ Create.

ðŸ‘‰ NÃ¤r Function App Ã¤r skapad:

GÃ¥ till Functions â†’ Create â†’ vÃ¤lj HTTP Trigger.

Namnge funktionen RegisterVisitor.

Klicka pÃ¥ den â†’ gÃ¥ in pÃ¥ Code + Test.

Klistra in exempel (Node.js):

const { Connection, Request } = require("tedious");

module.exports = async function (context, req) {
    const name = req.body?.name || "Unknown";

    // Logga till Application Insights
    context.log("Ny registrering: " + name);

    // Koppla mot databasen
    const config = {
        authentication: {
            options: {
                userName: process.env["DB_USER"],
                password: process.env["DB_PASS"]
            },
            type: "default"
        },
        server: process.env["DB_SERVER"],
        options: {
            database: process.env["DB_NAME"],
            encrypt: true
        }
    };

    const connection = new Connection(config);

    await new Promise((resolve, reject) => {
        connection.on("connect", err => {
            if (err) {
                context.log("Connection failed", err);
                reject(err);
            } else {
                const sql = `INSERT INTO Visitors (Name) VALUES (@Name);`;
                const request = new Request(sql, err => {
                    if (err) reject(err);
                    else resolve();
                });
                request.addParameter("Name", TYPES.NVarChar, name);
                connection.execSql(request);
            }
        });
        connection.connect();
    });

    context.res = {
        body: { message: `Registrering mottagen fÃ¶r ${name}` }
    };
};


ðŸ‘‰ Viktigt:

GÃ¥ till Configuration i Function App â†’ LÃ¤gg till Application settings:

DB_USER = ditt SQL anvÃ¤ndarnamn

DB_PASS = lÃ¶senordet

DB_SERVER = t.ex. visitor-sql-server.database.windows.net

DB_NAME = VisitorDB

ðŸ”¹ Steg 4 â€“ Skapa frontend (Static Web App)

Create a resource â†’ sÃ¶k Static Web App.

Name: visitor-frontend.

Deployment: vÃ¤lj Other (ingen GitHub Ã¤n).

Region: samma som backend.

Klicka Create.

ðŸ‘‰ NÃ¤r sidan Ã¤r klar:

GÃ¥ till Configuration â†’ stÃ¤ll in API URL till din Function App.

Ladda upp en enkel index.html:

<!DOCTYPE html>
<html>
<head>
    <title>BesÃ¶ksregistrering</title>
</head>
<body>
    <h1>Registrera dig som besÃ¶kare</h1>
    <form id="visitorForm">
        <input type="text" id="name" placeholder="Ditt namn" required>
        <button type="submit">Checka in</button>
    </form>
    <p id="result"></p>

    <script>
        document.getElementById("visitorForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const name = document.getElementById("name").value;
            const response = await fetch("DIN_FUNCTION_URL", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name })
            });
            const data = await response.json();
            document.getElementById("result").innerText = data.message;
        });
    </script>
</body>
</html>


ðŸ‘‰ Byt DIN_FUNCTION_URL till lÃ¤nken du hittar i Function App â†’ Get function URL.

ðŸ”¹ Steg 5 â€“ Testa systemet

Ã–ppna din Static Web App URL.

Skriv in ett namn och skicka formulÃ¤ret.

GÃ¥ till SQL Database â†’ Query editor â†’ SELECT * FROM Visitors;

GÃ¥ till Application Insights (kopplat till Function App) â†’ se loggar.